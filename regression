import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Generate some sample data
X = np.array([[1, 2], [2, 4], [3, 6], [4, 8], [5, 10]])
y = np.array([2, 4, 6, 8, 10])

# Create a linear regression model and fit the data
model = LinearRegression()
model.fit(X, y)


# Print the coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

# Plot the data points and the linear regression line
plt.scatter(X[:, 0], y, color='blue')
plt.plot(X[:, 0], model.predict(X), color='red')
plt.title("Linear Regression Model")
plt.xlabel("X")
plt.ylabel("y")
plt.show()

import numpy as np
from sklearn.linear_model import LogisticRegression
import matplotlib.pyplot as plt


# Generate some sample data
X = np.array([[1, 2], [2, 4], [3, 6], [4, 8], [5, 10]])
y = np.array([0, 0, 0, 1, 1])

# Create a logistic regression model and fit the data
model = LogisticRegression()
model.fit(X, y)

# Print the coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

# Use the model to predict new data
new_data = np.array([[6, 12], [7, 14]])
predictions = model.predict(new_data)
print("Predictions:", predictions)

# Plot the data points and the linear regression line
plt.scatter(X[:, 0], y, color='blue')
plt.plot(X[:, 0], model.predict(X), color='red')
plt.title("Logistic Regression Model")
plt.xlabel("X")
plt.ylabel("y")
plt.show()



